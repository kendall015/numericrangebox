/*
 * This is free and unencumbered software released into the public domain.
 * 
 * Anyone is free to copy, modify, publish, use, compile, sell, or
 * distribute this software, either in source code form or as a compiled
 * binary, for any purpose, commercial or non-commercial, and by any
 * means.
 * 
 * In jurisdictions that recognize copyright laws, the author or authors
 * of this software dedicate any and all copyright interest in the
 * software to the public domain. We make this dedication for the benefit
 * of the public at large and to the detriment of our heirs and
 * successors. We intend this dedication to be an overt act of
 * relinquishment in perpetuity of all present and future rights to this
 * software under copyright law.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
 * IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR
 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 * 
 * For more information, please refer to <http://unlicense.org/>
 */

namespace ExampleProject
{
    using System.Windows;
    using Controls;

    public class MainWindowModel : DependencyObject
    {
        // Dependency properties generated by http://users.jyu.fi/~jaotospe/wpf/

        #region Rb1Options property

        /// <summary>
        /// Rb1Options.
        /// </summary>
        public NumericRangeBoxOptions Rb1Options
        {
            get { return (NumericRangeBoxOptions)GetValue(Rb1OptionsProperty); }
            set { SetValue(Rb1OptionsProperty, value); }
        }

        /// <summary>
        /// Dependency property of Rb1Options.
        /// </summary>
        public static readonly DependencyProperty Rb1OptionsProperty = DependencyProperty.Register("Rb1Options", typeof(NumericRangeBoxOptions), typeof(MainWindowModel), new FrameworkPropertyMetadata(new PropertyChangedCallback(OnRb1OptionsChanged)));

        /// <summary>
        /// Occurs when the Rb1Options property changes.
        /// </summary>
        public event RoutedPropertyChangedEventHandler<NumericRangeBoxOptions> Rb1OptionsChanged;

        /// <summary>
        /// Identifies the Rb1OptionsChanged routed event.
        /// </summary>
        public static readonly RoutedEvent Rb1OptionsChangedEvent = EventManager.RegisterRoutedEvent("Rb1OptionsChanged", RoutingStrategy.Bubble, typeof(RoutedPropertyChangedEventHandler<NumericRangeBoxOptions>), typeof(MainWindowModel));

        /// <summary>
        /// Raised when any of the instances Rb1Options is changed.
        /// </summary>
        private static void OnRb1OptionsChanged(DependencyObject obj, DependencyPropertyChangedEventArgs args)
        {
            MainWindowModel control = (MainWindowModel)obj;
            RoutedPropertyChangedEventArgs<NumericRangeBoxOptions> e = new RoutedPropertyChangedEventArgs<NumericRangeBoxOptions>((NumericRangeBoxOptions)args.OldValue, (NumericRangeBoxOptions)args.NewValue, Rb1OptionsChangedEvent);

            // Raises the controls protected OnRb1OptionsChanged
            control.OnRb1OptionsChanged(e);
        }

        /// <summary>
        /// Raises the Rb1OptionsChanged event.
        /// </summary>
        /// <param name="args">Arguments associated with the Rb1OptionsChanged event.</param>
        protected virtual void OnRb1OptionsChanged(RoutedPropertyChangedEventArgs<NumericRangeBoxOptions> args)
        {
            // Raise the event in this instance.
            if (Rb1OptionsChanged != null)
                Rb1OptionsChanged(this, args);
        }

        #endregion Rb1Options property

        #region GeneratedSql property
        /// <summary>
        /// GeneratedSql.
        /// </summary>
        public string GeneratedSql
        {
            get { return (string)GetValue(GeneratedSqlProperty); }
            set { SetValue(GeneratedSqlProperty, value); }
        }

        /// <summary>
        /// Dependency property of GeneratedSql.
        /// </summary>
        public static readonly DependencyProperty GeneratedSqlProperty = DependencyProperty.Register("GeneratedSql", typeof(string), typeof(MainWindowModel), new FrameworkPropertyMetadata(string.Empty, new PropertyChangedCallback(OnGeneratedSqlChanged)));

        /// <summary>
        /// Occurs when the GeneratedSql property changes.
        /// </summary>
        public event RoutedPropertyChangedEventHandler<string> GeneratedSqlChanged;

        /// <summary>
        /// Identifies the GeneratedSqlChanged routed event.
        /// </summary>
        public static readonly RoutedEvent GeneratedSqlChangedEvent = EventManager.RegisterRoutedEvent("GeneratedSqlChanged", RoutingStrategy.Bubble, typeof(RoutedPropertyChangedEventHandler<string>), typeof(MainWindowModel));

        /// <summary>
        /// Raised when any of the instances GeneratedSql is changed.
        /// </summary>
        private static void OnGeneratedSqlChanged(DependencyObject obj, DependencyPropertyChangedEventArgs args)
        {
            MainWindowModel control = (MainWindowModel)obj;
            RoutedPropertyChangedEventArgs<string> e = new RoutedPropertyChangedEventArgs<string>((string)args.OldValue, (string)args.NewValue, GeneratedSqlChangedEvent);

            // Raises the controls protected OnGeneratedSqlChanged
            control.OnGeneratedSqlChanged(e);
        }

        /// <summary>
        /// Raises the GeneratedSqlChanged event.
        /// </summary>
        /// <param name="args">Arguments associated with the GeneratedSqlChanged event.</param>
        protected virtual void OnGeneratedSqlChanged(RoutedPropertyChangedEventArgs<string> args)
        {
            // Raise the event in this instance.
            if (GeneratedSqlChanged != null)
                GeneratedSqlChanged(this, args);
        }
        #endregion

        public MainWindowModel()
        {
            this.Rb1Options = new NumericRangeBoxOptions();
        }
    }
}