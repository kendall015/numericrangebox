/*
 * This is free and unencumbered software released into the public domain.
 * 
 * Anyone is free to copy, modify, publish, use, compile, sell, or
 * distribute this software, either in source code form or as a compiled
 * binary, for any purpose, commercial or non-commercial, and by any
 * means.
 * 
 * In jurisdictions that recognize copyright laws, the author or authors
 * of this software dedicate any and all copyright interest in the
 * software to the public domain. We make this dedication for the benefit
 * of the public at large and to the detriment of our heirs and
 * successors. We intend this dedication to be an overt act of
 * relinquishment in perpetuity of all present and future rights to this
 * software under copyright law.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
 * IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR
 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 * 
 * For more information, please refer to <http://unlicense.org/>
 */

namespace Controls
{
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Windows;
    using System.Windows.Controls;
    using System.Windows.Media;

    /// <summary>
    ///     NumericRangeBox is a WPF UserControl used to assist in building SQL queries
    ///     using comparisons including greater than, less than, range, null and not null.
    /// </summary>
    /// <remarks>
    ///     Dependency properties generated by http://users.jyu.fi/~jaotospe/wpf
    ///     Toolbox icon adapted from Led Icons by Gasyoun https://www.iconfinder.com/iconsets/ledicons
    /// </remarks>
    public partial class NumericRangeBox : UserControl
    {
        #region ComparisonModes property

        /// <summary>
        ///     Dependency property of ComparisonModes.
        /// </summary>
        public static readonly DependencyProperty ComparisonModesProperty =
            DependencyProperty.Register(
                "ComparisonModes",
                typeof(List<NumericRangeBoxComparisonMode>),
                typeof(NumericRangeBox));

        /// <summary>
        ///     ComparisonModes.
        /// </summary>
        public List<NumericRangeBoxComparisonMode> ComparisonModes
        {
            get
            {
                return (List<NumericRangeBoxComparisonMode>)this.GetValue(ComparisonModesProperty);
            }
            set
            {
                this.SetValue(ComparisonModesProperty, value);
            }
        }

        #endregion ComparisonModes property

        #region Modes property

        /// <summary>
        ///     Dependency property of Modes.
        /// </summary>
        public static readonly DependencyProperty ModesProperty = DependencyProperty.Register(
            "Modes",
            typeof(List<NumericRangeBoxMode>),
            typeof(NumericRangeBox));

        /// <summary>
        ///     Modes.
        /// </summary>
        public List<NumericRangeBoxMode> Modes
        {
            get
            {
                return (List<NumericRangeBoxMode>)this.GetValue(ModesProperty);
            }
            set
            {
                this.SetValue(ModesProperty, value);
            }
        }

        #endregion Modes property

        #region SelectedOptions property

        /// <summary>
        ///     Dependency property of SelectedOptions.
        /// </summary>
        public static readonly DependencyProperty SelectedOptionsProperty =
            DependencyProperty.Register(
                "SelectedOptions",
                typeof(NumericRangeBoxOptions),
                typeof(NumericRangeBox),
                new FrameworkPropertyMetadata(OnSelectedOptionsChanged));

        /// <summary>
        ///     Identifies the SelectedOptionsChanged routed event.
        /// </summary>
        public static readonly RoutedEvent SelectedOptionsChangedEvent =
            EventManager.RegisterRoutedEvent(
                "SelectedOptionsChanged",
                RoutingStrategy.Bubble,
                typeof(RoutedPropertyChangedEventHandler<NumericRangeBoxOptions>),
                typeof(NumericRangeBox));

        /// <summary>
        ///     SelectedOptions.
        /// </summary>
        public NumericRangeBoxOptions SelectedOptions
        {
            get
            {
                return (NumericRangeBoxOptions)this.GetValue(SelectedOptionsProperty);
            }
            set
            {
                this.SetValue(SelectedOptionsProperty, value);
            }
        }

        /// <summary>
        ///     Occurs when the SelectedOptions property changes.
        /// </summary>
        public event RoutedPropertyChangedEventHandler<NumericRangeBoxOptions> SelectedOptionsChanged;

        /// <summary>
        ///     Raised when any of the instances SelectedOptions is changed.
        /// </summary>
        private static void OnSelectedOptionsChanged(DependencyObject obj, DependencyPropertyChangedEventArgs args)
        {
            NumericRangeBox control = (NumericRangeBox)obj;
            var e = new RoutedPropertyChangedEventArgs<NumericRangeBoxOptions>(
                (NumericRangeBoxOptions)args.OldValue,
                (NumericRangeBoxOptions)args.NewValue,
                SelectedOptionsChangedEvent);

            // Raises the controls protected OnSelectedOptionsChanged
            control.OnSelectedOptionsChanged(e);
        }

        /// <summary>
        ///     Raises the SelectedOptionsChanged event.
        /// </summary>
        /// <param name="args">Arguments associated with the SelectedOptionsChanged event.</param>
        protected virtual void OnSelectedOptionsChanged(RoutedPropertyChangedEventArgs<NumericRangeBoxOptions> args)
        {
            // Raise the event in this instance.
            if (this.SelectedOptionsChanged != null)
            {
                this.SelectedOptionsChanged(this, args);
            }
        }

        #endregion SelectedOptions property

        #region LabelForeground property

        /// <summary>
        ///     Dependency property of LabelForeground.
        /// </summary>
        public static readonly DependencyProperty LabelForegroundProperty =
            DependencyProperty.Register(
                "LabelForeground",
                typeof(Brush),
                typeof(NumericRangeBox),
                new FrameworkPropertyMetadata(Brushes.Black));

        /// <summary>
        ///     LabelForeground.
        /// </summary>
        public Brush LabelForeground
        {
            get
            {
                return (Brush)this.GetValue(LabelForegroundProperty);
            }
            set
            {
                this.SetValue(LabelForegroundProperty, value);
            }
        }

        #endregion LabelForeground property

        #region LabelFontFamily property

        /// <summary>
        ///     Dependency property of LabelFontFamily.
        /// </summary>
        public static readonly DependencyProperty LabelFontFamilyProperty =
            DependencyProperty.Register(
                "LabelFontFamily",
                typeof(FontFamily),
                typeof(NumericRangeBox),
                new FrameworkPropertyMetadata(new FontFamily("Segoe UI")));

        /// <summary>
        ///     LabelFontFamily.
        /// </summary>
        public FontFamily LabelFontFamily
        {
            get
            {
                return (FontFamily)this.GetValue(LabelFontFamilyProperty);
            }
            set
            {
                this.SetValue(LabelFontFamilyProperty, value);
            }
        }

        #endregion LabelFontFamily property

        #region LabelFontWeight property

        /// <summary>
        ///     Dependency property of LabelFontWeight.
        /// </summary>
        public static readonly DependencyProperty LabelFontWeightProperty =
            DependencyProperty.Register(
                "LabelFontWeight",
                typeof(FontWeight),
                typeof(NumericRangeBox),
                new FrameworkPropertyMetadata(FontWeights.Normal));

        /// <summary>
        ///     LabelFontWeight.
        /// </summary>
        public FontWeight LabelFontWeight
        {
            get
            {
                return (FontWeight)this.GetValue(LabelFontWeightProperty);
            }
            set
            {
                this.SetValue(LabelFontWeightProperty, value);
            }
        }

        #endregion LabelFontWeight property

        #region LabelFontSize property

        /// <summary>
        ///     Dependency property of LabelFontSize.
        /// </summary>
        public static readonly DependencyProperty LabelFontSizeProperty = DependencyProperty.Register(
            "LabelFontSize",
            typeof(double),
            typeof(NumericRangeBox),
            new FrameworkPropertyMetadata((double)12));

        /// <summary>
        ///     LabelFontSize.
        /// </summary>
        public double LabelFontSize
        {
            get
            {
                return (double)this.GetValue(LabelFontSizeProperty);
            }
            set
            {
                this.SetValue(LabelFontSizeProperty, value);
            }
        }

        #endregion LabelFontSize property

        #region LabelFontStyle property

        /// <summary>
        ///     Dependency property of LabelFontStyle.
        /// </summary>
        public static readonly DependencyProperty LabelFontStyleProperty = DependencyProperty.Register(
            "LabelFontStyle",
            typeof(FontStyle),
            typeof(NumericRangeBox),
            new FrameworkPropertyMetadata(FontStyles.Normal));

        /// <summary>
        ///     LabelFontStyle.
        /// </summary>
        public FontStyle LabelFontStyle
        {
            get
            {
                return (FontStyle)this.GetValue(LabelFontStyleProperty);
            }
            set
            {
                this.SetValue(LabelFontStyleProperty, value);
            }
        }

        #endregion LabelFontStyle property

        #region TextBoxFontFamily property

        /// <summary>
        ///     Dependency property of TextBoxFontFamily.
        /// </summary>
        public static readonly DependencyProperty TextBoxFontFamilyProperty =
            DependencyProperty.Register(
                "TextBoxFontFamily",
                typeof(FontFamily),
                typeof(NumericRangeBox),
                new FrameworkPropertyMetadata(new FontFamily("Segoe UI")));

        /// <summary>
        ///     TextBoxFontFamily.
        /// </summary>
        public FontFamily TextBoxFontFamily
        {
            get
            {
                return (FontFamily)this.GetValue(TextBoxFontFamilyProperty);
            }
            set
            {
                this.SetValue(TextBoxFontFamilyProperty, value);
            }
        }

        #endregion TextBoxFontFamily property

        #region TextBoxFontWeight property

        /// <summary>
        ///     Dependency property of TextBoxFontWeight.
        /// </summary>
        public static readonly DependencyProperty TextBoxFontWeightProperty =
            DependencyProperty.Register(
                "TextBoxFontWeight",
                typeof(FontWeight),
                typeof(NumericRangeBox),
                new FrameworkPropertyMetadata(FontWeights.Normal));

        /// <summary>
        ///     TextBoxFontWeight.
        /// </summary>
        public FontWeight TextBoxFontWeight
        {
            get
            {
                return (FontWeight)this.GetValue(TextBoxFontWeightProperty);
            }
            set
            {
                this.SetValue(TextBoxFontWeightProperty, value);
            }
        }

        #endregion TextBoxFontWeight property

        #region TextBoxFontSize property

        /// <summary>
        ///     Dependency property of TextBoxFontSize.
        /// </summary>
        public static readonly DependencyProperty TextBoxFontSizeProperty =
            DependencyProperty.Register(
                "TextBoxFontSize",
                typeof(double),
                typeof(NumericRangeBox),
                new FrameworkPropertyMetadata((double)12));

        /// <summary>
        ///     TextBoxFontSize.
        /// </summary>
        public double TextBoxFontSize
        {
            get
            {
                return (double)this.GetValue(TextBoxFontSizeProperty);
            }
            set
            {
                this.SetValue(TextBoxFontSizeProperty, value);
            }
        }

        #endregion TextBoxFontSize property

        #region TextBoxFontStyle property

        /// <summary>
        ///     Dependency property of TextBoxFontStyle.
        /// </summary>
        public static readonly DependencyProperty TextBoxFontStyleProperty =
            DependencyProperty.Register(
                "TextBoxFontStyle",
                typeof(FontStyle),
                typeof(NumericRangeBox),
                new FrameworkPropertyMetadata(FontStyles.Normal));

        /// <summary>
        ///     TextBoxFontStyle.
        /// </summary>
        public FontStyle TextBoxFontStyle
        {
            get
            {
                return (FontStyle)this.GetValue(TextBoxFontStyleProperty);
            }
            set
            {
                this.SetValue(TextBoxFontStyleProperty, value);
            }
        }

        #endregion TextBoxFontStyle property

        #region ComboBoxFontFamily property

        /// <summary>
        ///     Dependency property of ComboBoxFontFamily.
        /// </summary>
        public static readonly DependencyProperty ComboBoxFontFamilyProperty =
            DependencyProperty.Register(
                "ComboBoxFontFamily",
                typeof(FontFamily),
                typeof(NumericRangeBox),
                new FrameworkPropertyMetadata(new FontFamily("Segoe UI")));

        /// <summary>
        ///     ComboBoxFontFamily.
        /// </summary>
        public FontFamily ComboBoxFontFamily
        {
            get
            {
                return (FontFamily)this.GetValue(ComboBoxFontFamilyProperty);
            }
            set
            {
                this.SetValue(ComboBoxFontFamilyProperty, value);
            }
        }

        #endregion ComboBoxFontFamily property

        #region ComboBoxFontWeight property

        /// <summary>
        ///     Dependency property of ComboBoxFontWeight.
        /// </summary>
        public static readonly DependencyProperty ComboBoxFontWeightProperty =
            DependencyProperty.Register(
                "ComboBoxFontWeight",
                typeof(FontWeight),
                typeof(NumericRangeBox),
                new FrameworkPropertyMetadata(FontWeights.Normal));

        /// <summary>
        ///     ComboBoxFontWeight.
        /// </summary>
        public FontWeight ComboBoxFontWeight
        {
            get
            {
                return (FontWeight)this.GetValue(ComboBoxFontWeightProperty);
            }
            set
            {
                this.SetValue(ComboBoxFontWeightProperty, value);
            }
        }

        #endregion ComboBoxFontWeight property

        #region ComboBoxFontSize property

        /// <summary>
        ///     Dependency property of ComboBoxFontSize.
        /// </summary>
        public static readonly DependencyProperty ComboBoxFontSizeProperty =
            DependencyProperty.Register(
                "ComboBoxFontSize",
                typeof(double),
                typeof(NumericRangeBox),
                new FrameworkPropertyMetadata((double)12));

        /// <summary>
        ///     ComboBoxFontSize.
        /// </summary>
        public double ComboBoxFontSize
        {
            get
            {
                return (double)this.GetValue(ComboBoxFontSizeProperty);
            }
            set
            {
                this.SetValue(ComboBoxFontSizeProperty, value);
            }
        }

        #endregion ComboBoxFontSize property

        #region ComboBoxFontStyle property

        /// <summary>
        ///     Dependency property of ComboBoxFontStyle.
        /// </summary>
        public static readonly DependencyProperty ComboBoxFontStyleProperty =
            DependencyProperty.Register(
                "ComboBoxFontStyle",
                typeof(FontStyle),
                typeof(NumericRangeBox),
                new FrameworkPropertyMetadata(FontStyles.Normal));

        /// <summary>
        ///     ComboBoxFontStyle.
        /// </summary>
        public FontStyle ComboBoxFontStyle
        {
            get
            {
                return (FontStyle)this.GetValue(ComboBoxFontStyleProperty);
            }
            set
            {
                this.SetValue(ComboBoxFontStyleProperty, value);
            }
        }

        #endregion ComboBoxFontStyle property

        public NumericRangeBox()
        {
            this.Modes = Enum.GetValues(typeof(NumericRangeBoxMode)).Cast<NumericRangeBoxMode>().ToList();
            this.ComparisonModes =
                Enum.GetValues(typeof(NumericRangeBoxComparisonMode)).Cast<NumericRangeBoxComparisonMode>().ToList();
            this.InitializeComponent();
        }
    }
}