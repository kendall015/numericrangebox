/*
 * This is free and unencumbered software released into the public domain.
 * 
 * Anyone is free to copy, modify, publish, use, compile, sell, or
 * distribute this software, either in source code form or as a compiled
 * binary, for any purpose, commercial or non-commercial, and by any
 * means.
 * 
 * In jurisdictions that recognize copyright laws, the author or authors
 * of this software dedicate any and all copyright interest in the
 * software to the public domain. We make this dedication for the benefit
 * of the public at large and to the detriment of our heirs and
 * successors. We intend this dedication to be an overt act of
 * relinquishment in perpetuity of all present and future rights to this
 * software under copyright law.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
 * IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR
 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 * 
 * For more information, please refer to <http://unlicense.org/>
 */

namespace Controls
{
    using System.ComponentModel;
    using System.Windows;

    /// <summary>
    ///     NumericRangeBoxOptions is a container for the options selected by the NumericRangeBox
    /// </summary>
    /// <remarks>
    ///     Dependency properties generated by http://users.jyu.fi/~jaotospe/wpf
    /// </remarks>
    public class NumericRangeBoxOptions : DependencyObject, INotifyPropertyChanged
    {
        #region INotifyPropertyChanged

        public event PropertyChangedEventHandler PropertyChanged;

        protected void OnPropertyChanged(string name)
        {
            PropertyChangedEventHandler handler = this.PropertyChanged;
            if (handler != null)
            {
                handler(this, new PropertyChangedEventArgs(name));
            }
        }

        #endregion INotifyPropertyChanged

        #region NumericRangeBoxMode property

        /// <summary>
        ///     Dependency property of NumericRangeBoxMode.
        /// </summary>
        public static readonly DependencyProperty NumericRangeBoxModeProperty =
            DependencyProperty.Register(
                "NumericRangeBoxMode",
                typeof(NumericRangeBoxMode),
                typeof(NumericRangeBoxOptions),
                new FrameworkPropertyMetadata(NumericRangeBoxMode.All, OnNumericRangeBoxModeChanged));

        /// <summary>
        ///     Identifies the NumericRangeBoxModeChanged routed event.
        /// </summary>
        public static readonly RoutedEvent NumericRangeBoxModeChangedEvent =
            EventManager.RegisterRoutedEvent(
                "NumericRangeBoxModeChanged",
                RoutingStrategy.Bubble,
                typeof(RoutedPropertyChangedEventHandler<NumericRangeBoxMode>),
                typeof(NumericRangeBoxOptions));

        /// <summary>
        ///     NumericRangeBoxMode.
        /// </summary>
        public NumericRangeBoxMode NumericRangeBoxMode
        {
            get
            {
                return (NumericRangeBoxMode)this.GetValue(NumericRangeBoxModeProperty);
            }
            set
            {
                this.SetValue(NumericRangeBoxModeProperty, value);
            }
        }

        /// <summary>
        ///     Occurs when the NumericRangeBoxMode property changes.
        /// </summary>
        public event RoutedPropertyChangedEventHandler<NumericRangeBoxMode> NumericRangeBoxModeChanged;

        /// <summary>
        ///     Raised when any of the instances NumericRangeBoxMode is changed.
        /// </summary>
        private static void OnNumericRangeBoxModeChanged(DependencyObject obj, DependencyPropertyChangedEventArgs args)
        {
            NumericRangeBoxOptions control = (NumericRangeBoxOptions)obj;
            var e = new RoutedPropertyChangedEventArgs<NumericRangeBoxMode>(
                (NumericRangeBoxMode)args.OldValue,
                (NumericRangeBoxMode)args.NewValue,
                NumericRangeBoxModeChangedEvent);

            // Raises the controls protected OnNumericRangeBoxModeChanged
            control.OnPropertyChanged("NumericRangeBoxMode");
            control.OnNumericRangeBoxModeChanged(e);
        }

        /// <summary>
        ///     Raises the NumericRangeBoxModeChanged event.
        /// </summary>
        /// <param name="args">Arguments associated with the NumericRangeBoxModeChanged event.</param>
        protected virtual void OnNumericRangeBoxModeChanged(RoutedPropertyChangedEventArgs<NumericRangeBoxMode> args)
        {
            // Raise the event in this instance.
            if (this.NumericRangeBoxModeChanged != null)
            {
                this.NumericRangeBoxModeChanged(this, args);
            }
        }

        #endregion NumericRangeBoxMode property

        #region NumericRangeBoxComparisonMode property

        /// <summary>
        ///     Dependency property of NumericRangeBoxComparisonMode.
        /// </summary>
        public static readonly DependencyProperty NumericRangeBoxComparisonModeProperty =
            DependencyProperty.Register(
                "NumericRangeBoxComparisonMode",
                typeof(NumericRangeBoxComparisonMode),
                typeof(NumericRangeBoxOptions),
                new FrameworkPropertyMetadata(
                    NumericRangeBoxComparisonMode.Equals,
                    OnNumericRangeBoxComparisonModeChanged));

        /// <summary>
        ///     Identifies the NumericRangeBoxComparisonModeChanged routed event.
        /// </summary>
        public static readonly RoutedEvent NumericRangeBoxComparisonModeChangedEvent =
            EventManager.RegisterRoutedEvent(
                "NumericRangeBoxComparisonModeChanged",
                RoutingStrategy.Bubble,
                typeof(RoutedPropertyChangedEventHandler<NumericRangeBoxComparisonMode>),
                typeof(NumericRangeBoxOptions));

        /// <summary>
        ///     NumericRangeBoxComparisonMode.
        /// </summary>
        public NumericRangeBoxComparisonMode NumericRangeBoxComparisonMode
        {
            get
            {
                return (NumericRangeBoxComparisonMode)this.GetValue(NumericRangeBoxComparisonModeProperty);
            }
            set
            {
                this.SetValue(NumericRangeBoxComparisonModeProperty, value);
            }
        }

        /// <summary>
        ///     Occurs when the NumericRangeBoxComparisonMode property changes.
        /// </summary>
        public event RoutedPropertyChangedEventHandler<NumericRangeBoxComparisonMode>
            NumericRangeBoxComparisonModeChanged;

        /// <summary>
        ///     Raised when any of the instances NumericRangeBoxComparisonMode is changed.
        /// </summary>
        private static void OnNumericRangeBoxComparisonModeChanged(
            DependencyObject obj,
            DependencyPropertyChangedEventArgs args)
        {
            NumericRangeBoxOptions control = (NumericRangeBoxOptions)obj;
            var e =
                new RoutedPropertyChangedEventArgs<NumericRangeBoxComparisonMode>(
                    (NumericRangeBoxComparisonMode)args.OldValue,
                    (NumericRangeBoxComparisonMode)args.NewValue,
                    NumericRangeBoxComparisonModeChangedEvent);

            // Raises the controls protected OnNumericRangeBoxComparisonModeChanged
            control.OnPropertyChanged("NumericRangeBoxComparisonMode");
            control.OnNumericRangeBoxComparisonModeChanged(e);
        }

        /// <summary>
        ///     Raises the NumericRangeBoxComparisonModeChanged event.
        /// </summary>
        /// <param name="args">Arguments associated with the NumericRangeBoxComparisonModeChanged event.</param>
        protected virtual void OnNumericRangeBoxComparisonModeChanged(
            RoutedPropertyChangedEventArgs<NumericRangeBoxComparisonMode> args)
        {
            // Raise the event in this instance.
            if (this.NumericRangeBoxComparisonModeChanged != null)
            {
                this.NumericRangeBoxComparisonModeChanged(this, args);
            }
        }

        #endregion NumericRangeBoxComparisonMode property

        #region Value property

        /// <summary>
        ///     Dependency property of Value.
        /// </summary>
        public static readonly DependencyProperty ValueProperty = DependencyProperty.Register(
            "Value",
            typeof(string),
            typeof(NumericRangeBoxOptions),
            new FrameworkPropertyMetadata(string.Empty, OnValueChanged));

        /// <summary>
        ///     Identifies the ValueChanged routed event.
        /// </summary>
        public static readonly RoutedEvent ValueChangedEvent = EventManager.RegisterRoutedEvent(
            "ValueChanged",
            RoutingStrategy.Bubble,
            typeof(RoutedPropertyChangedEventHandler<string>),
            typeof(NumericRangeBoxOptions));

        /// <summary>
        ///     Value.
        /// </summary>
        public string Value
        {
            get
            {
                return (string)this.GetValue(ValueProperty);
            }
            set
            {
                this.SetValue(ValueProperty, value);
            }
        }

        /// <summary>
        ///     Occurs when the Value property changes.
        /// </summary>
        public event RoutedPropertyChangedEventHandler<string> ValueChanged;

        /// <summary>
        ///     Raised when any of the instances Value is changed.
        /// </summary>
        private static void OnValueChanged(DependencyObject obj, DependencyPropertyChangedEventArgs args)
        {
            NumericRangeBoxOptions control = (NumericRangeBoxOptions)obj;
            var e = new RoutedPropertyChangedEventArgs<string>(
                (string)args.OldValue,
                (string)args.NewValue,
                ValueChangedEvent);

            // Raises the controls protected OnValueChanged
            control.OnPropertyChanged("Value");
            control.OnValueChanged(e);
        }

        /// <summary>
        ///     Raises the ValueChanged event.
        /// </summary>
        /// <param name="args">Arguments associated with the ValueChanged event.</param>
        protected virtual void OnValueChanged(RoutedPropertyChangedEventArgs<string> args)
        {
            // Raise the event in this instance.
            if (this.ValueChanged != null)
            {
                this.ValueChanged(this, args);
            }
        }

        #endregion Value property

        #region MinValue property

        /// <summary>
        ///     Dependency property of MinValue.
        /// </summary>
        public static readonly DependencyProperty MinValueProperty = DependencyProperty.Register(
            "MinValue",
            typeof(string),
            typeof(NumericRangeBoxOptions),
            new FrameworkPropertyMetadata(string.Empty, OnMinValueChanged));

        /// <summary>
        ///     Identifies the MinValueChanged routed event.
        /// </summary>
        public static readonly RoutedEvent MinValueChangedEvent = EventManager.RegisterRoutedEvent(
            "MinValueChanged",
            RoutingStrategy.Bubble,
            typeof(RoutedPropertyChangedEventHandler<string>),
            typeof(NumericRangeBoxOptions));

        /// <summary>
        ///     MinValue.
        /// </summary>
        public string MinValue
        {
            get
            {
                return (string)this.GetValue(MinValueProperty);
            }
            set
            {
                this.SetValue(MinValueProperty, value);
            }
        }

        /// <summary>
        ///     Occurs when the MinValue property changes.
        /// </summary>
        public event RoutedPropertyChangedEventHandler<string> MinValueChanged;

        /// <summary>
        ///     Raised when any of the instances MinValue is changed.
        /// </summary>
        private static void OnMinValueChanged(DependencyObject obj, DependencyPropertyChangedEventArgs args)
        {
            NumericRangeBoxOptions control = (NumericRangeBoxOptions)obj;
            var e = new RoutedPropertyChangedEventArgs<string>(
                (string)args.OldValue,
                (string)args.NewValue,
                MinValueChangedEvent);

            // Raises the controls protected OnMinValueChanged
            control.OnPropertyChanged("MinValue");
            control.OnMinValueChanged(e);
        }

        /// <summary>
        ///     Raises the MinValueChanged event.
        /// </summary>
        /// <param name="args">Arguments associated with the MinValueChanged event.</param>
        protected virtual void OnMinValueChanged(RoutedPropertyChangedEventArgs<string> args)
        {
            // Raise the event in this instance.
            if (this.MinValueChanged != null)
            {
                this.MinValueChanged(this, args);
            }
        }

        #endregion MinValue property

        #region MaxValue property

        /// <summary>
        ///     Dependency property of MaxValue.
        /// </summary>
        public static readonly DependencyProperty MaxValueProperty = DependencyProperty.Register(
            "MaxValue",
            typeof(string),
            typeof(NumericRangeBoxOptions),
            new FrameworkPropertyMetadata(string.Empty, OnMaxValueChanged));

        /// <summary>
        ///     Identifies the MaxValueChanged routed event.
        /// </summary>
        public static readonly RoutedEvent MaxValueChangedEvent = EventManager.RegisterRoutedEvent(
            "MaxValueChanged",
            RoutingStrategy.Bubble,
            typeof(RoutedPropertyChangedEventHandler<string>),
            typeof(NumericRangeBoxOptions));

        /// <summary>
        ///     MaxValue.
        /// </summary>
        public string MaxValue
        {
            get
            {
                return (string)this.GetValue(MaxValueProperty);
            }
            set
            {
                this.SetValue(MaxValueProperty, value);
            }
        }

        /// <summary>
        ///     Occurs when the MaxValue property changes.
        /// </summary>
        public event RoutedPropertyChangedEventHandler<string> MaxValueChanged;

        /// <summary>
        ///     Raised when any of the instances MaxValue is changed.
        /// </summary>
        private static void OnMaxValueChanged(DependencyObject obj, DependencyPropertyChangedEventArgs args)
        {
            NumericRangeBoxOptions control = (NumericRangeBoxOptions)obj;
            var e = new RoutedPropertyChangedEventArgs<string>(
                (string)args.OldValue,
                (string)args.NewValue,
                MaxValueChangedEvent);

            // Raises the controls protected OnMaxValueChanged
            control.OnPropertyChanged("MaxValue");
            control.OnMaxValueChanged(e);
        }

        /// <summary>
        ///     Raises the MaxValueChanged event.
        /// </summary>
        /// <param name="args">Arguments associated with the MaxValueChanged event.</param>
        protected virtual void OnMaxValueChanged(RoutedPropertyChangedEventArgs<string> args)
        {
            // Raise the event in this instance.
            if (this.MaxValueChanged != null)
            {
                this.MaxValueChanged(this, args);
            }
        }

        #endregion MaxValue property
    }
}